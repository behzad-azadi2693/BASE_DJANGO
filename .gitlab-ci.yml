stages:
  - stage_build
  - stage_test
  - stage_push
  - stage_develop
  - stage_deploy
  - stage_new_release



before_script:
  - echo "POSTGRES_HOST=$POSTGRES_HOST" >> .env
  - echo "POSTGRES_PORT=$POSTGRES_PORT" >> .env
  - echo "POSTGRES_NAME=$POSTGRES_NAME" >> .env
  - echo "POSTGRES_USER=$POSTGRES_USER" >> .env
  - echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
  - echo "DEBUG=$DEBUG" >> .env
  - echo "SECRET_KEY=$SECRET_KEY" >> .env
  - echo "DJANGO_PORT=$DJANGO_PORT" >> .env
  - echo "BACKEND_DOMAIN=$BACKEND_DOMAIN" >> .env
  - echo "CORS_ALLOWED_ORIGINS=$CORS_ALLOWED_ORIGINS" >> .env
  - echo "IMAGE_VERSION=$IMAGE_VERSION" >> .env
  - echo "CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE" >> .env
  - sudo docker compose up -d postgres
  #- sudo docker pull python:3.10
  - echo "$CI_REGISTRY_PASSWORD" | sudo docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"


build_job:
  stage: stage_build
  tags: ["runner-test"]
  environment:
    name: server-test
  script:
    - sudo docker build --tag "$CI_REGISTRY_IMAGE:$IMAGE_VERSION" . --no-cache
  only:
    - main
    - develop
    - tags
    - merge_request
    

test_job:
  stage: stage_test
  tags: ["runner-test"]
  dependencies:
    - "build_job"
  environment:
    name: server-test
  script:
    - sudo docker compose run web python manage.py makemigrations
    - sudo docker compose run web python manage.py migrate  
    - sudo docker compose run web python manage.py test
  only:
    - main
    - develop
    - tags
    - merge_request


push_job:
  stage: stage_push
  tags: ["runner-test"]
  dependencies:
    - "test_job"
  environment:
    name: server-test
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main")'
      when: always
    - if: '$CI_COMMIT_TAG'
      when: always
  script: 
    - sudo docker tag "$CI_REGISTRY_IMAGE:$IMAGE_VERSION" "${CI_REGISTRY}:5050/${CI_PROJECT_PATH}:${IMAGE_VERSION}"
    - sudo docker push "${CI_REGISTRY}:5050/${CI_PROJECT_PATH}:${IMAGE_VERSION}"


develop_job:
  stage: stage_develop
  tags: ["runner-develop"]
  dependencies:
    - "push_job"
  environment:
    name: server-develop
  variables:
    DEBUG: "True"
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
      when: always
  script:
    - sudo docker compose pull "${CI_REGISTRY}:5050/${CI_PROJECT_PATH}:${IMAGE_VERSION}"
    - sudo docker tag "${CI_REGISTRY}:5050/${CI_PROJECT_PATH}:${IMAGE_VERSION}" "$CI_REGISTRY_IMAGE:$IMAGE_VERSION"
    - sudo docker compose down web
    - sudo docker compose up -d


deploy_job:
  stage: stage_deploy
  tags: ["runner-deploy"]
  dependencies:
    - "push_job"
  when: manual
  environment:
    name: server-deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
      when: always
  script:
    - sudo docker compose pull "${CI_REGISTRY}:5050/${CI_PROJECT_PATH}:${IMAGE_VERSION}"
    - sudo docker tag "${CI_REGISTRY}:5050/${CI_PROJECT_PATH}:${IMAGE_VERSION}" "$CI_REGISTRY_IMAGE:$IMAGE_VERSION"
    - sudo docker compose down web
    - sudo docker compose up -d


new_release:
  stage: stage_new_release
  tags: ["runner-deploy"]
  dependencies:
    - "push_job"
  environment:
    name: server-deploy
  script:
    - sudo docker compose pull "${CI_REGISTRY}:5050/${CI_PROJECT_PATH}:${IMAGE_VERSION}"
    - sudo docker tag "${CI_REGISTRY}:5050/${CI_PROJECT_PATH}:${IMAGE_VERSION}" "$CI_REGISTRY_IMAGE:$IMAGE_VERSION"
    - sudo docker compose down web
    - sudo docker compose up -d
  rules:
    - if: "$CI_COMMIT_TAG"
      when: always
  release:
    tag_name: "$CI_COMMIT_TAG"
    description: "Release for $CI_COMMIT_TAG"


after_script:
  - sudo docker logout
  - sudo docker compose down -v

